#!/usr/bin/python2.7

#############################################################################################
#Change the filtered maf file generated by R and output as a snp call type file
#############################################################################################

import sys
#import os
import csv
from collections import defaultdict

#set up script
#os.chdir('/Users/d.brown6/Documents/eQTL/Matrix_eQTL_R/')
inFile = sys.argv[1]
data = []

#read in the files
f = open(inFile, 'U')
files = csv.reader(f, delimiter='\t')
for row in files:
    data.append(row)
    
#get the header row then remove it from data
dataHeader = data[0][:]
data = data[1:]

#create a list of patient IDs
def makeListFromColumn(table, columnNumber):
    'Makes a list out of particular column from a table'    
    extractedList = []
    for row in table:
        extractedList.append(row[columnNumber])
    extractedListDedup = sorted(set(extractedList))
    return extractedListDedup

tumourSampleBarcode = makeListFromColumn(data, 2)

#-------------------------------Trying the dictionary: set way--------------------------------- 

#===============================================================================
# A set object is an unordered collection of distinct objects.
#Common uses include membership testing, removing duplicates from a sequence, and 
#computing mathematical operations such as intersection, union, difference
#===============================================================================
def main():
    #initialise a set to hold patient IDs. This automatially removes duplicates
    patients = set(tumourSampleBarcode)
    
    #initialise a default dictionary to hold the gene names. Default means it adds an empty set when there is a key error
    mut = defaultdict(set)
    
    for entry in data:
        gene = entry[0]
        patientID = entry[2]
        #use the gene name as the key and patient ID as the value
        mut[gene].add(patientID)
        patients.add(patientID)
    pList = sorted(list(patients))
    
    print 'patient'+'\t' + '\t'.join(pList)
    #-----------------------------------------------------------------------------------------------
    
    #output key value pairs as tuples
    for (gene, P) in mut.items():
        #test if the patientID is a value for the gene key, make it 1 or 0
        l = ['1' if patient in P else '0' for patient in pList]
        #write out the gene name then the list membership
        print gene+'\t' + '\t'.join(l)           

f.close()
if __name__ == '__main__':
    main()
